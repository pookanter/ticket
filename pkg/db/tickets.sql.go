// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tickets.sql

package db

import (
	"context"
	"database/sql"
)

const createTicket = `-- name: CreateTicket :exec
INSERT INTO
  tickets (
    status_id,
    title,
    description,
    contact,
    sort_order,
    created_at
  )
VALUES
  (?, ?, ?, ?, ?, NOW())
`

type CreateTicketParams struct {
	StatusID    uint32         `json:"status_id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Contact     sql.NullString `json:"contact"`
	SortOrder   uint32         `json:"sort_order"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) error {
	_, err := q.db.ExecContext(ctx, createTicket,
		arg.StatusID,
		arg.Title,
		arg.Description,
		arg.Contact,
		arg.SortOrder,
	)
	return err
}

const getTicketsByStatusId = `-- name: GetTicketsByStatusId :many
SELECT
  id, status_id, title, description, contact, sort_order, created_at, updated_at
FROM
  tickets
WHERE
  status_id = ?
`

func (q *Queries) GetTicketsByStatusId(ctx context.Context, statusID uint32) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketsByStatusId, statusID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.StatusID,
			&i.Title,
			&i.Description,
			&i.Contact,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :exec
UPDATE
  tickets
SET
  title = ?,
  description = ?,
  contact = ?,
  updated_at = NOW()
WHERE
  id = ?
`

type UpdateTicketParams struct {
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Contact     sql.NullString `json:"contact"`
	ID          uint64         `json:"id"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) error {
	_, err := q.db.ExecContext(ctx, updateTicket,
		arg.Title,
		arg.Description,
		arg.Contact,
		arg.ID,
	)
	return err
}
