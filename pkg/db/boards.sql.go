// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: boards.sql

package db

import (
	"context"
	"database/sql"
)

const createBoard = `-- name: CreateBoard :exec
INSERT INTO
  boards (user_id, title, sort_order, created_at)
VALUES
  (?, ?, ?, NOW())
`

type CreateBoardParams struct {
	UserID    uint64         `json:"user_id"`
	Title     sql.NullString `json:"title"`
	SortOrder uint32         `json:"sort_order"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) error {
	_, err := q.db.ExecContext(ctx, createBoard, arg.UserID, arg.Title, arg.SortOrder)
	return err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM
  boards
WHERE
  id = ?
`

func (q *Queries) DeleteBoard(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteBoard, id)
	return err
}

const getBoardById = `-- name: GetBoardById :one
SELECT
  id, user_id, title, sort_order, created_at, updated_at
FROM
  boards
WHERE
  id = ?
`

func (q *Queries) GetBoardById(ctx context.Context, id uint32) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoardById, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBoardsByUserId = `-- name: GetBoardsByUserId :many
SELECT
  id, user_id, title, sort_order, created_at, updated_at
FROM
  boards
WHERE
  user_id = ?
`

func (q *Queries) GetBoardsByUserId(ctx context.Context, userID uint64) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, getBoardsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Board{}
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastBoardByUserId = `-- name: GetLastBoardByUserId :one
SELECT
  id, user_id, title, sort_order, created_at, updated_at
FROM
  boards
WHERE
  user_id = ?
ORDER BY
  created_at DESC
LIMIT
  1
`

func (q *Queries) GetLastBoardByUserId(ctx context.Context, userID uint64) (Board, error) {
	row := q.db.QueryRowContext(ctx, getLastBoardByUserId, userID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLastInsertBoardByUserId = `-- name: GetLastInsertBoardByUserId :one
SELECT
  id, user_id, title, sort_order, created_at, updated_at
FROM
  boards
WHERE
  user_id = ?
ORDER BY
  created_at DESC
LIMIT
  1
`

func (q *Queries) GetLastInsertBoardByUserId(ctx context.Context, userID uint64) (Board, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertBoardByUserId, userID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBoard = `-- name: UpdateBoard :exec
UPDATE
  boards
SET
  title = ?,
  updated_at = NOW()
WHERE
  id = ?
`

type UpdateBoardParams struct {
	Title sql.NullString `json:"title"`
	ID    uint32         `json:"id"`
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) error {
	_, err := q.db.ExecContext(ctx, updateBoard, arg.Title, arg.ID)
	return err
}
