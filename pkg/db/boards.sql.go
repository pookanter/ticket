// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: boards.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const countBoardByUserID = `-- name: CountBoardByUserID :one
SELECT
  COUNT(*)
FROM
  boards
WHERE
  user_id = ?
`

func (q *Queries) CountBoardByUserID(ctx context.Context, userID uint64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBoardByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBoard = `-- name: CreateBoard :exec
INSERT INTO
  boards (user_id, title, sort_order, created_at)
VALUES
  (?, ?, ?, NOW())
`

type CreateBoardParams struct {
	UserID    uint64      `db:"user_id" json:"user_id"`
	Title     null.String `db:"title" json:"title"`
	SortOrder uint32      `db:"sort_order" json:"sort_order"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) error {
	_, err := q.db.ExecContext(ctx, createBoard, arg.UserID, arg.Title, arg.SortOrder)
	return err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM
  boards
WHERE
  id = ?
`

func (q *Queries) DeleteBoard(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteBoard, id)
	return err
}

const getBoard = `-- name: GetBoard :one
SELECT
  id, user_id, title, sort_order, created_at, updated_at
FROM
  boards
WHERE
  id = ?
  AND user_id = ?
`

type GetBoardParams struct {
	ID     uint32 `db:"id" json:"id"`
	UserID uint64 `db:"user_id" json:"user_id"`
}

func (q *Queries) GetBoard(ctx context.Context, arg GetBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoard, arg.ID, arg.UserID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBoardsByUserID = `-- name: GetBoardsByUserID :many
SELECT
  id, user_id, title, sort_order, created_at, updated_at
FROM
  boards
WHERE
  user_id = ?
`

func (q *Queries) GetBoardsByUserID(ctx context.Context, userID uint64) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, getBoardsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Board{}
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastInsertBoardID = `-- name: GetLastInsertBoardID :one
SELECT
  LAST_INSERT_ID()
FROM
  statuses
LIMIT
  1
`

func (q *Queries) GetLastInsertBoardID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertBoardID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const updateBoard = `-- name: UpdateBoard :exec
UPDATE
  boards
SET
  title = ?,
  updated_at = NOW()
WHERE
  id = ?
`

type UpdateBoardParams struct {
	Title null.String `db:"title" json:"title"`
	ID    uint32      `db:"id" json:"id"`
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) error {
	_, err := q.db.ExecContext(ctx, updateBoard, arg.Title, arg.ID)
	return err
}
