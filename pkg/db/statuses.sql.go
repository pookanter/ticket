// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: statuses.sql

package db

import (
	"context"
	"database/sql"
)

const createStatus = `-- name: CreateStatus :exec
INSERT INTO
  statuses (board_id, title, created_at)
VALUES
  (?, ?, NOW())
`

type CreateStatusParams struct {
	BoardID sql.NullInt32
	Title   sql.NullString
}

func (q *Queries) CreateStatus(ctx context.Context, arg CreateStatusParams) error {
	_, err := q.db.ExecContext(ctx, createStatus, arg.BoardID, arg.Title)
	return err
}

const deleteStatus = `-- name: DeleteStatus :exec
DELETE FROM
  statuses
WHERE
  id = ?
`

func (q *Queries) DeleteStatus(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteStatus, id)
	return err
}

const getStatusesByBoardId = `-- name: GetStatusesByBoardId :many
SELECT
  id, board_id, title, created_at, updated_at
FROM
  statuses
WHERE
  board_id = ?
`

func (q *Queries) GetStatusesByBoardId(ctx context.Context, boardID sql.NullInt32) ([]Status, error) {
	rows, err := q.db.QueryContext(ctx, getStatusesByBoardId, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(
			&i.ID,
			&i.BoardID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE
  statuses
SET
  title = ?,
  updated_at = NOW()
WHERE
  id = ?
`

type UpdateStatusParams struct {
	Title sql.NullString
	ID    uint32
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStatus, arg.Title, arg.ID)
	return err
}
